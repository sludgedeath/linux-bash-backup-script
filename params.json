{
  "name": "Linux-bash-backup-script",
  "tagline": "linux bash backup script",
  "body": "**linux bash backup script**\r\n\r\nIncremental and rotating linux bash backup script which keeps original folder structure and does not overwrite unchanged files. Supports multiple backup destinations and filenames containing whitespaces and non-alphanumeric characters.\r\nUses no compression.\r\n\r\n\r\n***\r\n**Setup**\r\n\r\n* edit `DAYS`, `TARGET` and `SOURCE` in backup.sh\r\n\r\n* if necessary,  edit crontab parameters in install.sh\r\n\r\n* open terminal and run `chmod +x install.sh && ./install.sh`\r\n***\r\n\r\n**backup.sh**\r\n```bash\r\n#!/bin/bash\r\nDAYS=7\r\n\r\nDESTINATION=(\r\n\t'/media/'\"$(whoami)\"'/Backup'\r\n)\r\n\r\nSOURCE=(\r\n\t'/home/'\"$(whoami)\"'/dev'\r\n\t'/home/share/database'\r\n\t'/home/share/txt'\r\n\t'/home/share/web'\r\n)\r\n\r\n\r\n####################################################################################################\r\n#(. )( .)  (. )( .)  (. )( .)  (. )( .)  (. )( .)  (. )( .)  (. )( .)  (. )( .)  (. )( .)  (. )( .)#\r\n####################################################################################################\r\n\r\ncopy_ () {\r\n\tfil=$1\r\n\ttarget=$2\r\n\ttstamp=$(stat \"$fil\" -c %y | cut -d \".\" -f1 |  sed -e  's/-//g; s/://; s/\\ //g; s/:/\\./')\r\n\tcp \"$fil\" \"$target\"\"$fil\"\r\n\techo COPY \"$target\"\"$fil\"\r\n\ttouch -mt $tstamp \"$target\"\"$fil\"\r\n}\r\n\r\nfor TARGET in ${DESTINATION[@]} ; do\r\n\r\n\tif [ ! -d \"$TARGET\" ]; then\r\n\t\tlogger \"backup storage medium not found:\" \"$TARGET\" \r\n\t\techo ERROR\r\n\t\tbreak\r\n\tfi\r\n\t\r\n\tlogger \"backup is backing up files now:\" \"$TARGET\"\r\n\r\n\t#rm unneeded dates\r\n\tfolders_count=$(ls \"$TARGET\" | wc -l)\r\n\tif (( $folders_count > $DAYS )); then\r\n\t\tfor rm_folder in $(ls \"$TARGET\" -t | tail -n $(( $folders_count - $DAYS )) );do\r\n\t\t\trm -r $\"TARGET\"'/'\"$rm_folder\"\r\n\t\tdone\r\n\tfi\r\n\r\n\t#mk todays dir\r\n\tdir_='/'$(date +\"%d-%m-%y\")\r\n\tif [ ! -d \"$dir_\" ];then\r\n\t\tmkdir -p \"$TARGET\"\"$dir_\"\r\n\tfi\r\n\r\n\tTARGET=\"$TARGET\"\"$dir_\"\r\n\r\n\t#rm files from Backup\r\n\tfind \"$TARGET\" -type f | while read files;do\r\n\t\tsourcefile=$(echo \"$files\"|sed 's|'$TARGET'||'g )\r\n\t\tif [ ! -f \"$sourcefile\" ] ;then\r\n\t\t\trm \"$TARGET\"\"$sourcefile\"\r\n\t\tfi\r\n\tdone\r\n\t#rm dirs from Backup\r\n\tfind \"$TARGET\" -type d| while read dir;do\r\n\t\tsourcefile=$(echo \"$dir\"|sed 's|\"$TARGET\"||'g )\r\n\t\tif [ ! -d \"$sourcefile\" ] ;then\r\n\t\t\trm -r \"$TARGET\"\"$sourcefile\"\r\n\t\tfi\r\n\tdone\r\n\r\n\tfor files in ${SOURCE[@]}; do\r\n\t\t#mkdirs on Backup\r\n\t\tfind \"$files\" -type d | while read dir; do\r\n\t\t\tif [ ! -d $\"TARGET\"\"$dir\" ]; then\r\n\t\t\t\tmkdir -p \"$TARGET\"\"$dir\"\r\n\t\t\tfi\r\n\t\tdone\r\n\t\t#file operations\r\n\t\tfind \"$files\" -type f | while read file ; do\r\n\t\t\tif [ ! -f \"$TARGET\"\"$file\" ]; then\r\n\t\t\t\tcopy_ \"$file\" \"$TARGET\"\r\n\t\t\telse\r\n\t\t\t\tlm_o=$(stat \"$file\" -c %Y)\r\n\t\t\t\tlm_b=$(stat \"$TARGET\"\"$file\" -c %Y)\r\n\t\t\t\tif [ $lm_o != $lm_b ];then\r\n\t\t\t\t\tcopy_ \"$file\" \"$TARGET\"\r\n\t\t\t\tfi\r\n\t\t\tfi \r\n\t\tdone\r\n\t\t\r\n\tdone #SOURCE\r\n\t\r\ndone #TARGET\r\n\r\n\r\n```\r\n**install.sh**\r\n```bash\r\n#!/bin/sh\r\n\r\nmkdir -p '/home/'$(whoami)'/.backup' \r\ncp 'backup.sh' '/home/'$(whoami)'/.backup' \r\nchmod +x '/home/'$(whoami)'/.backup/backup.sh'\r\n\r\n\r\ncrontab -l > '/tmp/ccron'\r\nif grep -q \"#backup\" \"/tmp/ccron\";then\r\n\techo \"#backup cron job exists\"\r\nelse\r\n\techo \"adding new cron job\"\r\n\techo '55 0-23/2 * * * /home/'$(whoami)'/.backup/backup.sh #backup' >> '/tmp/ccron'\r\n\tcrontab '/tmp/ccron'\r\nfi\r\n\r\nrm '/tmp/ccron'\r\n\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}